#!/usr/bin/env zsh
# shellcheck disable=SC1071

# Functions
function does_entity_exist() {
  if test "$1" "$3"; then
    echo "${2} ${3} exists"
  else
    echo "${2} ${3} does not exist"
  fi
}

function newRemoteBranch() {
  branchName="${1:=HEAD}"
  remote="${2:=origin}"

  git push -u "$remote" "$branchName"
}

function backupWallpapers() {
  $(which node) "$WALLPAPERS_DIR/compressWallpapers.mjs"
}

function downloadFile() {
  URL="$1"
  FILE_NAME="$2"
  echo -e "\n"

  if command -v http &>/dev/null; then
    if [ -z "$FILE_NAME" ]; then
      http -d "$URL"
    else
      http -d "$URL" -o "$FILE_NAME"
    fi

  elif command -v curl &>/dev/null; then
    echo -e "Seems like httpie is not installed...Using curl instead\n"

    if [ -z "$FILE_NAME" ]; then
      curl -LJO "$URL"
    else
      curl -LJo "$FILE_NAME" "$URL"
    fi

  elif command -v wget &>/dev/null; then
    echo -e "Seems like curl is not installed. Let's try wget\n"

    if [ -z "$FILE_NAME" ]; then
      wget "$URL"
    else
      wget -O "$FILE_NAME" "$URL"
    fi

  else
    echo "Seems like neither httpie, curl, or wget are available. Please download one of them first!"
    exit 126
  fi
}

function unlockBWVault() {
  BW_SESSION=$("$HOME/Desktop/olaolu_dev/dev/bitwarden-auto-unlock/src/autoUnlockBitwardenVault.sh")
  [[ -z "$BW_SESSION" ]] && return 1

  export BW_SESSION

  echo "Initiating Bitwarden vault sync..."
  bw sync
}

function areWallpapersBackedup() {
  echo "Counting current wallpapers: \c"
  wallpaperCount=$(ls "$WALLPAPERS_DIR/images" | wc -l)
  echo "$wallpaperCount"

  echo -e "Counting images present in compressed wallpapers tarball file: \c"
  wallpaperTarBallFileCount=$(if [[ -f $WALLPAPERS_DIR/tarball/wallpapers.tar.gz ]]; then bc <<<"$(tar -tf "$WALLPAPERS_DIR/tarball/wallpapers.tar.gz" | wc -l) - 1"; else echo 0; fi)

  echo "$wallpaperTarBallFileCount"

  if [[ $wallpaperCount -eq $wallpaperTarBallFileCount ]]; then
    echo "All Backed up!"
  elif [[ $wallpaperCount -lt $wallpaperTarBallFileCount ]]; then
    echo "You need restore your wallpapers from the tarball"
  else
    echo "You need to backup your wallpapers hun!"
  fi
}

function repoInit() {
  # To create the `main` branch https://stackoverflow.com/questions/9162271/fatal-not-a-valid-object-name-master
  git init
  touch .gitignore

  git add -A
  git commit -m "repo init"

  git checkout -b dev
  git rebase main

  git checkout -b feature
  git rebase develop
}

# Gotten from https://github.com/o2sh/onefetch/wiki/getting-started
last_repository=
check_directory_for_new_repository() {
  current_repository=$(git rev-parse --show-toplevel 2>/dev/null)

  if [ "$current_repository" ] &&
    [ "$current_repository" != "$last_repository" ]; then
    echo -e "\n"
    onefetch
  fi
  last_repository=$current_repository
  echo -e "\r"
}

# Gotten From https://stackoverflow.com/questions/3964068/zsh-automatically-run-ls
function chpwd() {
  emulate -L zsh
  check_directory_for_new_repository
  logo-ls || ls
}

function editPromptConf() {
  SHELL_PROMPT="$PS1"

  if [[ $SHELL_PROMPT == *"starship"* ]]; then
    echo "Opening Starship config..."
    nv "$HOME/.config/starship.toml" || vi "$HOME/.config/starship.toml"
  elif [[ $SHELL_PROMPT == *"spaceship"* ]]; then
    echo "Opening Spaceship config..."
    nv "$HOME/.zshrc" || vi "$HOME/.zshrc"
  fi
}

# Gotten From https://unix.stackexchange.com/a/282433
function addToPATH() {
  case ":$PATH:" in
  *":$1:"*) : ;;        # already there
  *) PATH="$PATH:$1" ;; # or PATH="$PATH:$1"
  esac
}

function fixSpicePermissionIssues() {
  sudo chmod a+wr /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify
  sudo chmod a+wr -R /var/lib/flatpak/app/com.spotify.Client/x86_64/stable/active/files/extra/share/spotify/Apps
}

function createPyVirtEnv() {
  currentDir=$(pwd)
  virtualEnvPath="${1:=$currentDir}"

  [[ ! -d $virtualEnvPath ]] && mkdir "$virtualEnvPath"

  echo "layout python" >|"$virtualEnvPath/.envrc"
  direnv allow "$virtualEnvPath"

  # Commented out to avoid having two virtual envs in one directory
  # python3 -m venv $virtualEnvPath/env

  cd "$virtualEnvPath" || return

  # Update pip version to latest since ensurepip is stuck at 21.1
  python -m pip install --upgrade pip

  # Install common depdendencies
  # Reltive path because we have cd'ed into the target directory
  reqFilePath="./requirements.txt"

  echo "pylint" >|"$reqFilePath"
  python3 -m pip install -r "$reqFilePath"

  # Let us know what has been installed
  echo -e "\n"
  python3 -m pip list
}

function backupGHExtensions() {
  gh extension list | awk '{print $3}' >|"$DOTS/gh/gh-extensions.txt"
}

function dejaDupIgnore() {
  nameOfDirToIgnore="*${1:=node_modules}*"
  dirLocation="${2:=$LEARNING}"

  function innerFn() {
    # shellcheck disable=SC2317
    targetFilePath="$1/.deja-dup-ignore"

    # shellcheck disable=SC2317
    if [[ ! -f $targetFilePath ]]; then
      touch "$targetFilePath"
    else
      rm "$targetFilePath"
    fi

    # shellcheck disable=SC2317
    doesFileExist "$targetFilePath"
  }

  find "$dirLocation" -name "$nameOfDirToIgnore" -type d -exec bash -c 'innerFn "$0"' {} \;
}

function addInstalledPackages() {
  if [[ $# -eq 0 ]]; then
    nvim "$PACKAGE_LST_FILE"
  else
    # This means we have provided packages to add
    PACKAGES_TO_ADD=$(
      IFS=$'\n'
      echo "$*"
    )
    echo "$PACKAGES_TO_ADD" >>"$PACKAGE_LST_FILE"
  fi
}

function addPaddingToGnomeTerminal() {
  stylesPath="$HOME/.config/gtk-3.0/gtk.css"

  cat <<EOF >>"$stylesPath"

  VteTerminal,
  TerminalScreen,
  vte-terminal {
      padding: 4px 16px 10px 16px;
      -VteTerminal-inner-border: 4px 16px 10px 16px;
  }
EOF
}

function updateGnomeTheme() {
  themeName="${1:=$(gsettings get org.gnome.desktop.interface gtk-theme | tr -d "'")}"
  echo "Theme name is $themeName"

  if [[ -z "$themeName" ]]; then
    echo "Please specify the name of the theme"
    return 1
  fi

  themeDir="$THEMES_DIR/$themeName"

  if [[ ! -d "$themeDir" ]]; then
    echo "$themeDir does not exist. Make sure the theme name provided corresponds with a dir name in the ~/.themes directory"
    return 1
  fi

  echo -e "Setting flatpak theme..."
  sudo flatpak override --env=GTK_THEME="$themeName"
  echo -e "\n"

  echo "Linking gtk-4.0 contents to ~/.config/gtk-4.0/ dir to theme other more stubborn applications..."
  ln -svf $themeDir/gtk-4.0/* "$HOME/.config/gtk-4.0/"

  # echo -e "\nLinking gtk-3.0 contents to ~/.config/gtk-3.0/ dir, just in case..."
  # ln -svf $themeDir/gtk-3.0/* "$HOME/.config/gtk-3.0/"

  addPaddingToGnomeTerminal
}

function backupInstalledCrates() {
  cargo install --list | grep ':' | awk '{print $1}' >|"$DISTRO_SETUP/src/common/assets/rust-crates.txt"
}

function generatePsswd() {
  LENGTH="${1:=16}"
  echo "Generating new password..."
  bw generate -ulns --length $LENGTH | tr -d '"' | wl-copy
  echo "Password copied to clipboard"
}

function backupGnomeExtensions() {
  EXTENSIONS_DIR="$HOME/.local/share/gnome-shell/extensions/"

  ls "$EXTENSIONS_DIR" >|"$SYS_BAK_DIR/gnome-shell-ext-list.txt"
}

function removeQuotes() {
  # Removes both single and double quotes
  # https://stackoverflow.com/questions/9733338/shell-script-remove-first-and-last-quote-from-a-variable
  tr -d "'\""
}

function isPackageInstalled() {
  if [[ $# -eq 0 ]]; then
    echo "No argument was passed. Exiting..."
    return 1
  else
    # This means we have provided packages to add
    PACKAGES_TO_CHECK_FOR=$(
      IFS=$'\n'
      echo "$*"
    )
    rpm -qa | grep "$PACKAGES_TO_CHECK_FOR"
  fi
}

function timerWithNotif() {
  timerDuration="${1:=5m}"

  termdown $timerDuration
  noti -t "Timer Countdown" -m "Time's Up!"
}

function backupGlobalNpmPkgs() {
  pnpm ls -g | tail --lines +6 | awk '{print $1}' >|"$DOTS/npm/global-npm-pkgs.txt"
}

function installBackedUpGlobalNpmPkgs() {
  while read -r line; do
    pnpm add -g $line
  done <"$DOTS/npm/global-npm-pkgs.txt"
}

function uninstallBackedUpGlobalNpmPkgs() {
  while read -r line; do
    pnpm rm -g $line
  done <"$DOTS/npm/global-npm-pkgs.txt"
}

function updateNodeTo() {
  nextNodeVer="$1"
  prevNodeVer="$(node -v)"

  echo -e "Backing up global npm packages...\c"
  backupGlobalNpmPkgs
  echo "Done!"

  echo "Removing global npm packages for current node version..."
  uninstallBackedUpGlobalNpmPkgs

  echo "Installing latest node version..."
  nvm install "$nextNodeVer" --latest-npm
  nvm alias default "$nextNodeVer"
  echo -e "Installation complete\n"

  echo "Reinstalling pnpm..."
  corepack enable
  corepack prepare pnpm@latest --activate
  echo -e "Done\n"

  echo -e "Finalizing pnpm installation...\c"
  sleep 2
  echo "Done!"

  echo "Reinstalling global packages from previous node version with pnpm..."
  installBackedUpGlobalNpmPkgs
  echo -e "Done!\n"

  echo "Removing previous node version..."
  nvm uninstall "$prevNodeVer"
  echo "Done!"
}

function backupDnfAliases() {
  dnf alias | sed 's/Alias//' >|"$DOTS/system/dnf-alias.txt"
}

function backupDejaDupConfig() {
  dconf dump /org/gnome/deja-dup/ | sed '/^last-restore/d' | cat >|"$SYS_BAK_DIR/deja-dup-config-backup.txt"
}

function ydlSilent() {
  yt-dlp "$1" &>/dev/null &
}

function queryUserInstalledPackages() {
  dnf history userinstalled | grep -E "$1"
}

# Gotten from https://serverfault.com/a/1040984
function backupGPGKey() {
  keyID="$1"
  backupDir="$HOME/sys-bak/gpg-keys/${keyID}"

  if [[ -z "$keyID" ]]; then
    echo "Please provide the key ID of the GPG key you wish to backup"
    return 1
  fi

  mkdir -p "$backupDir"

  echo "Backing up GPG Key ${keyID}..."

  echo -n "Backing up public key..."
  gpg --export --armor "$keyID" >|"$backupDir/${keyID}.pub.asc"
  echo "Done!"

  echo -n "Backing up private key..."
  gpg --export-secret-keys --armor "$keyID" >|"$backupDir/${keyID}.priv.asc"
  echo "Done!"

  echo -n "Backing up sub key..."
  gpg --export-secret-subkeys --armor "$keyID" >|"$backupDir/${keyID}.sub_priv.asc"
  echo "Done!"

  echo -n "Backing up owner trust..."
  gpg --export-ownertrust >|"$backupDir/ownertrust.txt"
  echo "Done!"

  echo "Backup complete!"
}

# Gotten from https://serverfault.com/a/1040984
function restoreGPGKey() {
  keyID="$1"
  backupDir="$HOME/sys-bak/gpg-keys/${keyID}"

  if [[ -z "$keyID" ]]; then
    echo "Please provide the key ID of the GPG key you wish to backup"
    return 1
  fi

  echo "Restoring GPG key ${keyID}..."

  echo -n "Restoring public key..."
  gpg --import "$backupDir/${keyID}.pub.asc"
  echo "Done!"

  echo -n "Restoring private key..."
  gpg --import "$backupDir/${keyID}.priv.asc"
  echo "Done!"

  echo -n "Restoring sub key..."
  gpg --import "$backupDir/${keyID}.sub_priv.asc"
  echo "Done!"

  echo -n "Restoring owner trust"
  gpg --import-ownertrust "$backupDir/ownertrust.txt"
  echo "Done!"

  echo -e "GPG key restoration complete, but you're not done yet!\n"

  echo "You still need to ultimately trust the imported keys"
  echo "You can do so by running the following commands"

  cat <<EOL
  gpg --edit-key your@id.here
  gpg> trust
  Your decision? 5
EOL
}

function vc() {
  targetDir="${1:=.}"

  code $targetDir
}

function pkg() {
  if [[ -f bun.lockb ]]; then
    command bun "$@"
  elif [[ -f pnpm-lock.yaml ]]; then
    command pnpm "$@"
  elif [[ -f yarn.lock ]]; then
    command yarn "$@"
  elif [[ -f package-lock.json ]]; then
    command npm "$@"
  else
    command pnpm "$@"
  fi
}

function hyprland() {
  Hyprland

  echo "Logging out.."
  sleep 1
  logout
}


# Env Variables
export DOTS="$HOME/Desktop/olaolu_dev/dotfiles"
export ALIASES="$HOME/.shell_env"
export SPICETIFY_INSTALL="$HOME/spicetify-cli"

export VISUAL="nvim"
export EDITOR="$VISUAL"
export DEV="$HOME/Desktop/olaolu_dev/dev"

export DISTRO_SETUP="$DEV/distro-setup"
export FONT_DIR="$HOME/.local/share/fonts"
export SYS_BAK_DIR="$DOTS/system"

export WALLPAPERS_DIR="$HOME/Pictures/Wallpapers"
export ZSH_ALIAS_FINDER_AUTOMATIC=true
export PACKAGE_LST_FILE="$DISTRO_SETUP/src/common/assets/packages.txt"

export NAVI_PATH="$DOTS/navi/cheats"
export NAVI_CONFIG="$DOTS/navi/config.yaml"
export ATUIN_CONFIG_DIR="$DOTS/atuin"

export FZF_DEFAULT_OPTS=" \
--color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"

export ASTRONVIM_CONFIG="$HOME/.config/nvim/lua/user/init.lua"
export _ZO_DATA_DIR="$DOTS/zoxide"
export TEALDEER_CONFIG_DIR="$DOTS/tldr"

export THEMES_DIR="$HOME/.themes/"
export CUSTOM_BIN_DIR="$HOME/.local/bin"
export NAP_CONFIG="$DOTS/nap/config.yaml"

export GPG_TTY="$(tty)"

# Aliases
alias doesFileExist="does_entity_exist -f File"
alias doesDirExist="does_entity_exist -d Directory"
alias listGlobalNpmPackages="pnpm -g ls"

alias checkForUpdates="dnf check-update"
alias reloadAliases="source ~/.shell_env"
alias editAliases="nv $HOME/.shell_env"

alias checkAutoUpdatesStatus="systemctl list-timers dnf-automatic-install.timer"
alias py="python3"
alias pvpn="protonvpn-cli"

alias activatePyVirtEnv="source ./bin/activate 2>/dev/null || source env/bin/activate"
alias cls="colorls --dark"
alias lls="logo-ls"

alias updateNodeToLatest="updateNodeTo node"
alias open="xdg-open"
alias spice="spicetify"

alias sysfetch="fm6000"
alias getDirSize="du -sh"
alias getFileSize="du -h"

alias nv="nvim"
alias echo="echo -e"

# shellcheck disable=SC2139
alias cronBackup="crontab -l >|$SYS_BAK_DIR/crontab-backup.bak"
alias zshconfig="nvim ~/.zshrc"
alias ohmyzsh="nvim ~/.oh-my-zsh"

alias refreshFonts="fc-cache -v"

alias bgrep="batgrep"
alias bman="batman"
alias copy="wl-copy"

alias paste="wl-paste"
alias diffDirs="diff -qr"
alias ydl="yt-dlp"

alias pyV="python -V"
alias pipV="python -m pip -V"
alias pvpnUS="pvpn c -p udp --cc US && pvpn s"

alias sizeOf="du -lh"
alias nd="node-docs"
alias lg="lazygit"

# shellcheck disable=SC2139
alias starshipConf="nvim $DOTS/starship_prompt/starship.toml"

alias reload="omz reload"
alias clr="clear"
alias q="cd ~ && clear"

alias sudo="sudo " # https://askubuntu.com/questions/22037/aliases-not-available-when-using-sudo
# shellcheck disable=SC2139
alias e="$EDITOR"
alias x+="chmod +x"

alias st="speedtest"
alias pvpnR="pvpn d && sleep 3 && pvpnUS"

# shellcheck disable=SC2139
alias editSysChangelog="nv $DOTS/system/changelog.md"
alias searchBw="bw list items --pretty --search"
alias tmd="termdown"

alias bt="bat -p"
alias hc="ghci"
alias exitRoot="sudo -k"

alias twn="timerWithNotif"
# shellcheck disable=SC2139
alias backupGHAliases="gh alias list >|$DOTS/gh/alias-list.txt"
alias fk="flatpak"

alias pm="pnpm"
alias pmA="pnpm add"
alias pmAD="pnpm add -D"

alias updatePnpm="corepack prepare pnpm@latest --activate"
alias updateGHC="ghcup tui"
alias np="nap"

alias gpt="chatgpt"
alias cabalREPLWithGlobalPackages="cabal repl -b containers,text,split"
alias dev="cd $DEV"

alias docs="cd $HOME/Documents/"
alias dlds="cd $HOME/Downloads/"
alias se="sudoedit"

alias icat="kitty +kitten icat"
alias gpg="gpg2"
alias updateNvim="nvim +AstroUpdate"

alias hlcR="hacker-laws-cli random"
alias pmAG="pnpm add -g"
