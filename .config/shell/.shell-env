#!/usr/bin/env zsh
# shellcheck disable=SC1071

# Env Variables
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_STATE_HOME="$HOME/.local/state/"

export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DESKTOP_DIR="$HOME/Desktop"
export XDG_DOCUMENTS_DIR="$HOME/Documents"

export XDG_DOWNLOAD_DIR="$HOME/Downloads"
export XDG_MUSIC_DIR="$HOME/Music"
export XDG_PICTURES_DIR="$HOME/Pictures"

export XDG_VIDEOS_DIR="$HOME/Videos"

export DOTS="$HOME/Desktop/dotfiles/.config"
export SHELL_ENV="$HOME/.shell-env"

export VISUAL="nvim"
export EDITOR="$VISUAL"
export DEV="$HOME/Desktop/labs"

export DISTRO_SETUP="$DEV/distro-setup"
export SYS_BAK_DIR_UNDER_GIT="$DOTS/system"
export WALLPAPERS_DIR="$XDG_PICTURES_DIR/Wallpapers"

export ZSH_ALIAS_FINDER_AUTOMATIC=true
export PACKAGE_LST_FILE="$DISTRO_SETUP/src/common/assets/packages.txt"
export NAVI_PATH="$DOTS/navi/cheats"

export NAVI_CONFIG="$DOTS/navi/config.yaml"
export ATUIN_CONFIG_DIR="$DOTS/atuin"

export FZF_DEFAULT_OPTS=" \
--color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#b4befe,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
--color=selected-bg:#45475a \
--multi"

export _ZO_DATA_DIR="$DOTS/zoxide"
export TEALDEER_CONFIG_DIR="$DOTS/tldr"
export LD=ld.lld

export THEMES_DIR="$XDG_DATA_HOME/themes"
export CUSTOM_BIN_DIR="$HOME/.local/bin"
export GPG_TTY="$(tty)"

export SHELL_THEME_DIR="$THEMES_DIR/$(gsettings get org.gnome.desktop.interface gtk-theme | tr -d "'")"
export SYS_BAK_DIR_NOT_UNDER_GIT="$HOME/sys-bak"
export CUSTOM_MAN_PATH="$XDG_DATA_HOME/man"

export FONT_DIR="$XDG_DATA_HOME/fonts"
export STARSHIP_CONFIG=$DOTS/starship/starship.toml
export MANPATH="$MANPATH:$CUSTOM_MAN_PATH"

export HISTFILE="$DOTS/shell/.zsh_history"
export GTK_THEME="$(gsettings get org.gnome.desktop.interface gtk-theme | tr -d "'")"
export GIT_PAGER="delta"

# Functions
function doesThisExist() {
  if test "$1" "$3"; then
    echo "${2} ${3} exists"
  else
    echo "${2} ${3} does not exist"
  fi
}

function newRemoteBranch() {
  branchName="${1:=HEAD}"
  remote="${2:=origin}"

  git push -u "$remote" "$branchName"
}

function backupWallpapers() {
  $(which node) "$WALLPAPERS_DIR/compressWallpapers.mjs"
}

function restoreWallpapers() {
  "$WALLPAPERS_DIR/extractWallpapers.sh"
}

function downloadFile() {
  URL="$1"
  FILE_NAME="$2"
  echo -e "\n"

  if command -v http &>/dev/null; then
    if [ -z "$FILE_NAME" ]; then
      http -d "$URL"
    else
      http -d "$URL" -o "$FILE_NAME"
    fi

  elif command -v curl &>/dev/null; then
    echo -e "Seems like httpie is not installed...Using curl instead\n"

    if [ -z "$FILE_NAME" ]; then
      curl -LJO "$URL"
    else
      curl -LJo "$FILE_NAME" "$URL"
    fi

  elif command -v wget &>/dev/null; then
    echo -e "Seems like curl is not installed. Let's try wget\n"

    if [ -z "$FILE_NAME" ]; then
      wget "$URL"
    else
      wget -O "$FILE_NAME" "$URL"
    fi

  else
    echo "Seems like neither httpie, curl, or wget are available. Please download one of them first!"
    exit 126
  fi
}

function unlockBWVault() {
  BW_SESSION=$("$HOME/Desktop/labs/bitwarden-auto-unlock/src/autoUnlockBitwardenVault.sh")
  [[ -z "$BW_SESSION" ]] && return 1

  export BW_SESSION

  echo "Initiating Bitwarden vault sync..."
  bw sync
}

function areWallpapersBackedup() {
  echo "Counting current wallpapers: \c"
  wallpaperCount=$(ls "$WALLPAPERS_DIR/images" | wc -l)
  echo "$wallpaperCount"

  echo -e "Counting images present in compressed wallpapers tarball file: \c"
  wallpaperTarBallFileCount=$(if [[ -f $WALLPAPERS_DIR/tarball/wallpapers.tar.gz ]]; then bc <<<"$(tar -tf "$WALLPAPERS_DIR/tarball/wallpapers.tar.gz" | wc -l) - 1"; else echo 0; fi)

  echo "$wallpaperTarBallFileCount"

  if [[ $wallpaperCount -eq $wallpaperTarBallFileCount ]]; then
    echo "All Backed up!"
  elif [[ $wallpaperCount -lt $wallpaperTarBallFileCount ]]; then
    echo "You need restore your wallpapers from the tarball"
  else
    echo "You need to backup your wallpapers hun!"
  fi
}

function repoInit() {
  # To create the `main` branch https://stackoverflow.com/questions/9162271/fatal-not-a-valid-object-name-master
  git init
  touch .gitignore

  git add -A
  git commit -m "repo init"

  git checkout -b dev
  git rebase main

  git checkout -b feature
  git rebase develop
}

# Gotten from https://github.com/o2sh/onefetch/wiki/getting-started
last_repository=
check_directory_for_new_repository() {
  current_repository=$(git rev-parse --show-toplevel 2>/dev/null)

  if [[ "$current_repository" ]] && [[ "$current_repository" != "$last_repository" ]]; then
    echo -e "\r"
    onefetch 2>/dev/null
  fi
  last_repository=$current_repository
  echo -e "\r"
}

# Gotten From https://stackoverflow.com/questions/3964068/zsh-automatically-run-ls
function chpwd() {
  emulate -L zsh
  # Commented out because it is currently unnecessary
  # check_directory_for_new_repository
  echo -e "\r"

  if command -v lsd &>/dev/null; then
    lsd
  elif command -v eza &>/dev/null; then
    eza --color=always --icons=always -a
  else
    ls -a
  fi
}

function editPromptConf() {
  SHELL_PROMPT="$PS1"

  if [[ $SHELL_PROMPT == *"starship"* ]]; then
    echo "Opening Starship config..."
    nvim $STARSHIP_CONFIG || vi "$STARSHIP_CONFIG"
  else
    echo "Opening ZSH config..."
    nvim "$HOME/.zshrc" || vi "$HOME/.zshrc"
  fi
}

# Gotten From https://unix.stackexchange.com/a/282433
function addToPATH() {
  case ":$PATH:" in
  *":$1:"*) : ;;        # already there
  *) PATH="$PATH:$1" ;; # or PATH="$PATH:$1"
  esac
}

function backupGHExtensions() {
  gh extension list | awk '{print $3}' >|"$DOTS/gh/gh-extensions.txt"
}

function dejaDupIgnore() {
  nameOfDirToIgnore="*${1:=node_modules}*"
  dirLocation="${2:=$LEARNING}"

  function innerFn() {
    # shellcheck disable=SC2317
    targetFilePath="$1/.deja-dup-ignore"

    # shellcheck disable=SC2317
    if [[ ! -f $targetFilePath ]]; then
      touch "$targetFilePath"
    else
      rm "$targetFilePath"
    fi

    # shellcheck disable=SC2317
    doesFileExist "$targetFilePath"
  }

  find "$dirLocation" -name "$nameOfDirToIgnore" -type d -exec bash -c 'innerFn "$0"' {} \;
}

function addInstalledPackages() {
  if [[ $# -eq 0 ]]; then
    nvim "$PACKAGE_LST_FILE"
  else
    # Convert incoming packages to an array
    PACKAGES_TO_ADD=("$@")

    # Iterate over each package
    for package in "${PACKAGES_TO_ADD[@]}"; do
      # Check if the package already exists in the file
      if ! grep -qx "$package" "$PACKAGE_LST_FILE"; then
        # Add it if not present
        echo "$package" >> "$PACKAGE_LST_FILE"
        echo "Added: $package"
      else
        echo "Package already exists: $package"
      fi
    done
  fi
}

function updateGnomeTheme() {
  themeName="${1:=$(gsettings get org.gnome.desktop.interface gtk-theme | tr -d "'")}"
  echo "Theme name is $themeName"

  if [[ -z "$themeName" ]]; then
    echo "Please specify the name of the theme"
    return 1
  fi

  themeDir="$THEMES_DIR/$themeName"

  if [[ ! -d "$themeDir" ]]; then
    echo "$themeDir does not exist. Make sure the theme name provided corresponds with a dir name in the $HOME/.themes directory"
    return 1
  fi

  echo -e "Setting flatpak theme..."
  sudo flatpak override --env=GTK_THEME="$themeName"
  export GTK_THEME="$themeName"
  echo -e "\n"

  echo "Linking gtk-4.0 contents to $XDG_CONFIG_HOME/gtk-4.0/ dir to theme other more stubborn applications..."
  ln -svf $themeDir/gtk-4.0/* "$XDG_CONFIG_HOME/gtk-4.0/"

  # echo -e "\nLinking gtk-3.0 contents to $XDG_CONFIG_HOME/gtk-3.0/ dir, just in case..."
  # ln -svf $themeDir/gtk-3.0/* "$XDG_CONFIG_HOME/gtk-3.0/"

}

function backupInstalledCrates() {
  listInstalledCrates >|"$DISTRO_SETUP/src/common/assets/rust-crates.txt"
}

function listInstalledCrates() {
  cargo install --list | grep ':' | awk '{print $1}'
}

function generatePsswd() {
  LENGTH="${1:=16}"
  echo "Generating new password..."
  bw generate -ulns --length $LENGTH | tr -d '"' | wl-copy
  echo "Password copied to clipboard"
}

function backupGnomeExtensions() {
  EXTENSIONS_DIR="$XDG_DATA_HOME/gnome-shell/extensions/"

  ls "$EXTENSIONS_DIR" -1 >|"$SYS_BAK_DIR_UNDER_GIT/gnome-shell-ext-list.txt"
}

function removeQuotes() {
  # Removes both single and double quotes
  # https://stackoverflow.com/questions/9733338/shell-script-remove-first-and-last-quote-from-a-variable

  tr -d "'\""
}

function isPackageInstalled() {
  if [[ $# -eq 0 ]]; then
    echo "No argument was passed. Exiting..."
    return 1
  else
    # This means we have provided packages to add
    PACKAGES_TO_CHECK_FOR=$(
      IFS=$'\n'
      echo "$*"
    )
    rpm -qa | grep "$PACKAGES_TO_CHECK_FOR"
  fi
}

function timerWithNotif() {
  timerDuration="${1:=5m}"

  termdown $timerDuration
  noti -t "Timer Countdown" -m "Time's Up!"
}

function backupGlobalNpmPkgs() {
  pnpm ls -g | tail --lines +6 | awk '{print $1}' >|"$DOTS/npm/global-npm-pkgs.txt"
}

function updateNodeTo() {
  nextNodeVer="$1"
  prevNodeVer="$(node -v)"

  if [[ $nextNodeVer == $prevNodeVer ]]; then
    echo "Node is already at the intended version"
    return
  fi

  echo -e "Backing up global npm packages...\c"
  backupGlobalNpmPkgs
  echo "Done!"

  echo "Installing latest node version..."
  nvm install --reinstall-packages-from=${prevNodeVer} --latest-npm $nextNodeVer
  nvm alias default $nextNodeVer
  echo -e "Installation complete\n"

  echo "Reinstalling pnpm..."
  corepack enable
  corepack prepare pnpm@latest --activate
  echo -e "Done\n"

  echo -e "Finalizing installation...\c"
  node -v
  sleep 2
  pnpm --version
  echo "Done!"

  echo "Removing previous node version..."
  nvm uninstall "$prevNodeVer"
  echo "Done!"
}

function backupDnfAliases() {
  dnf alias | sed 's/Alias//' >|"$DOTS/system/dnf-alias.txt"
}

function backupDejaDupConfig() {
  echo "Backing up DejaDup config..."
  dconf dump /org/gnome/deja-dup/ | sed '/^last-restore/d' | cat >|"$SYS_BAK_DIR_UNDER_GIT/deja-dup-config-backup.ini"

  if [[ -d "$HOME/.var/app/org.gnome.DejaDup" ]]; then
    echo "Also backing up config for flatpak..."
    cat "$HOME/.var/app/org.gnome.DejaDup/config/glib-2.0/settings/keyfile" >|"$SYS_BAK_DIR_UNDER_GIT/deja-dup-fk-config-backup.txt"
  fi

  echo "Done!"
}

function restoreDejaDupConf() {
  echo "Restoring DejaDup config..."
  dconf load /org/gnome/deja-dup/ <$SYS_BAK_DIR_UNDER_GIT/deja-dup-config-backup.ini

  if [[ -d "$HOME/.var/app/org.gnome.DejaDup" ]]; then
    echo "Also restoring config for flatpak..."
    cat "$SYS_BAK_DIR_UNDER_GIT/deja-dup-fk-config-backup.txt" >|"$HOME/.var/app/org.gnome.DejaDup/config/glib-2.0/settings/keyfile"
  fi

  echo "Done!"
}

function queryUserInstalledPackages() {
  dnf history userinstalled | grep -E "$1"
}

# Gotten from https://serverfault.com/a/1040984
function backupGPGKey() {
  keyID="$1"
  backupDir="$SYS_BAK_DIR_NOT_UNDER_GIT/gpg-keys/${keyID}"

  if [[ -z "$keyID" ]]; then
    echo "Please provide the key ID of the GPG key you wish to backup"
    return 1
  fi

  mkdir -p "$backupDir"

  echo "Backing up GPG Key ${keyID}..."

  echo -n "Backing up public key..."
  gpg --export --armor "$keyID" >|"$backupDir/${keyID}.pub.asc"
  echo "Done!"

  echo -n "Backing up private key..."
  gpg --export-secret-keys --armor "$keyID" >|"$backupDir/${keyID}.priv.asc"
  echo "Done!"

  echo -n "Backing up sub key..."
  gpg --export-secret-subkeys --armor "$keyID" >|"$backupDir/${keyID}.sub_priv.asc"
  echo "Done!"

  echo -n "Backing up owner trust..."
  gpg --export-ownertrust >|"$backupDir/ownertrust.txt"
  echo "Done!"

  echo "Backup complete!"
}

# Gotten from https://serverfault.com/a/1040984
function restoreGPGKey() {
  keyID="$1"
  backupDir="$SYS_BAK_DIR_NOT_UNDER_GIT/gpg-keys/${keyID}"

  if [[ -z "$keyID" ]]; then
    echo "Please provide the key ID of the GPG key you wish to backup"
    return 1
  fi

  echo "Restoring GPG key ${keyID}..."

  echo -n "Restoring public key..."
  gpg --import "$backupDir/${keyID}.pub.asc"
  echo "Done!"

  echo -n "Restoring private key..."
  gpg --import "$backupDir/${keyID}.priv.asc"
  echo "Done!"

  echo -n "Restoring sub key..."
  gpg --import "$backupDir/${keyID}.sub_priv.asc"
  echo "Done!"

  echo -n "Restoring owner trust"
  gpg --import-ownertrust "$backupDir/ownertrust.txt"
  echo "Done!"

  echo -e "GPG key restoration complete, but you're not done yet!\n"

  echo "You still need to ultimately trust the imported keys"
  echo "You can do so by running the following commands"

  cat <<EOL
  gpg --edit-key your@id.here
  gpg> trust
  Your decision? 5
EOL
}

function vc() {
  targetDir="${1:=.}"

  code $targetDir
}

function backupGnomeKeybindings() {
  # https://www.reddit.com/r/gnome/comments/l3ha66/comment/gkgg6hh/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
  echo -n "Backing up keybindings..."
  dconf dump /org/gnome/shell/keybindings/ >|"$SYS_BAK_DIR_UNDER_GIT/shell-keybindings.ini"
  dconf dump /org/gnome/desktop/wm/keybindings/ >|"$SYS_BAK_DIR_UNDER_GIT/desktop-wm-keybindings.ini"
  dconf dump /org/gnome/settings-daemon/plugins/media-keys/ >|"$SYS_BAK_DIR_UNDER_GIT/custom-keybindings.ini"
  echo "Done!"
}

function restoreGnomeKeybindings() {
  if [[ ! -f "$SYS_BAK_DIR_UNDER_GIT/shell-keybindings.ini" ]]; then
    echo "$SYS_BAK_DIR_UNDER_GIT/shell-keybindings.ini not found"
    return 1
  fi

  if [[ ! -f "$SYS_BAK_DIR_UNDER_GIT/desktop-wm-keybindings.ini" ]]; then
    echo "$SYS_BAK_DIR_UNDER_GIT/desktop-wm-keybindings.ini not found"
    return 1
  fi

  if [[ ! -f "$SYS_BAK_DIR_UNDER_GIT/custom-keybindings.ini" ]]; then
    echo "$SYS_BAK_DIR_UNDER_GIT/custom-keybindings.ini not found"
    return 1
  fi

  echo -n "Restoring keybindings..."
  dconf load /org/gnome/shell/keybindings/ <"$SYS_BAK_DIR_UNDER_GIT/shell-keybindings.ini"
  dconf load /org/gnome/desktop/wm/keybindings/ <"$SYS_BAK_DIR_UNDER_GIT/desktop-wm-keybindings.ini"
  dconf load /org/gnome/settings-daemon/plugins/media-keys/ <"$SYS_BAK_DIR_UNDER_GIT/custom-keybindings.ini"
  echo "Done!"
}

function removeDuplicateProcesses() {
  procName="$1"
  if [[ -z "$procName" ]]; then
    echo "This function requires a process name to work. Please provide one"
    return 1
  fi

  pgrep "$procName" | awk 'NR >= 2' | xargs -I {} kill {}

  if [[ "$?" -ne 0 ]]; then
    echo "Something went wrong when trying to remove duplicates of the ${procName} process. Are you sure duplicates exist?"
    return 1
  fi

  echo "Duplicates of ${procName} removed."
}

# https://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
function expandAlias() {
  # if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
  #   echo "$LBUFFER"
  # fi
  zle _expand_alias
  # zle expand-word
  # zle self-insert
}

function setGhcVersion() {
  ghcVersion="$1"
  ghcup set ghc "$ghcVersion"
}

function backupAichatConf() {
  sed 's/^[[:space:]]*api_key.*$/    api_key: <omitted>/g' $XDG_CONFIG_HOME/aichat/config.yaml >|$DOTS/aichat/config.yaml
}

function getNvidiaPrograms() {
  sudo lsof /dev/nvidia0 2>/dev/null | awk '{print $1}' | uniq | tail --lines 7
}

function getNvidiaProgramsRaw() {
  sudo lsof /dev/nvidia0 2>/dev/null
}

function aic() {
  aichat "$@" | bat --paging=never -f -l md
}

function aico() {
  aichat -m openai:gpt-4o "$@" | bat --paging=never -f -l md
}

function aiccl() {
  aichat -m claude:claude-3-5-sonnet-20240620 "$@" | bat --paging=never -f -l md
}

function aicR() {
  aichat "$@"
}

function sysfetch() {
  local commands=(fastfetch nitch rxfetch)
  local available_commands=()

  # Check which commands are available
  for cmd in $commands; do
    if (($ + commands[$cmd])); then
      available_commands+=($cmd)
    fi
  done

  # If no commands are available, print an error message and exit
  if ((${#available_commands} == 0)); then
    echo "Error: None of the required commands (fastfetch, nitch, rxfetch) are available on this system."
    return 1
  fi

  # Choose a random command from the available ones
  local random_index=$(($RANDOM % ${#available_commands}))
  ${available_commands[$random_index + 1]}
}

function tab() {
  tac "$@" | bat -f --style="auto"
}

function genSlackArchive() {
  if ! command -v slackdump &>/dev/null; then
    echo "This function requires slackdump to be installed and in the PATH"
    return 1
  fi

  local archiveDir="$XDG_DOCUMENTS_DIR/fp-slack-self-dm-archives"
  mkdir -p "$archiveDir"

  echo "Generating archive..."
  pushd "$archiveDir" &>/dev/null
  date +'%d-%m-%Y' | xargs -I {} slackdump -f -r json -base "archive-{}.zip" https://functionalprogramming.slack.com/archives/D042J5BAW74
  popd &>/dev/null
  echo "Done!"
}

function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

function tre() { 
  command tre "$@" -e && source "/tmp/tre_aliases_$USER" 2>/dev/null;
}

# Keyboard Bindings
zle -N expandAlias

bindkey "^ " expandAlias                               # [Ctrl-Space] - run command: expandAlias
bindkey -s '\el' 'lsd\n'                               # [Esc/Alt-l] - run command: lsd

# Aliases
alias doesFileExist="doesThisExist -f File"
alias doesDirExist="doesThisExist -d Directory"
alias listGlobalNpmPackages="pnpm -g ls"

alias checkForUpdates="dnf check-update"
alias reloadEnv="source $HOME/.shell-env"
alias editEnv="nv $HOME/.shell-env"

alias checkAutoUpdatesStatus="systemctl list-timers dnf-automatic-install.timer"
alias py="python3"
alias updateNodeToLatest="updateNodeTo node"

alias open="xdg-open"
alias getDirSize="du -sh"
alias getFileSize="du -h"

alias nv="nvim"
alias echo="echo -e"
alias zshconfig="nvim $HOME/.zshrc"

# shellcheck disable=SC2139
alias cronBackup="crontab -l >|$SYS_BAK_DIR_UNDER_GIT/crontab-backup.bak"
alias ohmyzsh="nvim $HOME/.oh-my-zsh"
alias refreshFonts="fc-cache -v"

alias bgrep="batgrep"
alias bman="batman"
alias copy="wl-copy"

alias paste="wl-paste"
alias sizeOf="du -lh"
alias lg="lazygit"

alias reloadOmz="omz reload"
alias clr="clear"
alias q="cd ~ && clear"

# https://askubuntu.com/questions/22037/aliases-not-available-when-using-sudo
alias sudo="sudo "
# shellcheck disable=SC2139
alias e="$EDITOR"
alias x+="chmod +x"

alias st="speedtest"
alias pvpnR="pvpn d && sleep 3 && pvpnUS"
alias searchBw="bw list items --pretty --search"

# shellcheck disable=SC2139
alias editSysChangelog="nv $DOTS/system/changelog.md"
alias tmd="termdown"
alias bt="bat -p"

alias hc="ghci"
alias exitRoot="sudo -k"
alias twn="timerWithNotif"

# shellcheck disable=SC2139
alias backupGHAliases="gh alias list >|$DOTS/gh/aliases.yml"
alias fk="flatpak"
alias updateGHC="ghcup tui"

alias pm="pnpm"
alias pmA="pnpm add"
alias pmAD="pnpm add -D"

alias updatePnpm="corepack prepare pnpm@latest --activate"
alias cabalREPLWithGlobalPackages="cabal repl -b containers,text,split"
alias dev="cd $DEV"

alias labs="cd $DEV"
alias docs="cd $HOME/Documents/"

alias dlds="cd $HOME/Downloads/"
alias se="sudoedit"
alias icat="kitty +kitten icat"

alias gpg="gpg2"
alias updateNvim="nvim +AstroUpdate"
alias hlcR="hacker-laws-cli random"

alias pmAG="pnpm add -g"
alias dots="cd $DOTS"
alias checkForCrateUpdates="cargo-install-update install-update --list"

alias checkRecentlyUpdatedPackages="dnf history info"
alias updateInstalledCrates="cargo-install-update install-update -a"

alias ipy="ipython"
alias man="batman"
alias sysInfo="inxi -Fzxx"

alias here="lsd ."
alias isNvidiaGpuActive="supergfxctl -S"
alias sgf="supergfxctl"

alias ldk="lazydocker"
alias dkc="docker compose"
alias dkcb="docker compose build"

alias eva="fend"
alias yz="yazi"
alias ai="aichat"

alias rip="gtrash"
alias gedit="gnome-text-editor"
alias fnd="fend"
