{"type":"entity","name":"Ola","entityType":"person","observations":["full name is Olaoluwa"]}
{"type":"entity","name":"VPS","entityType":"Infrastructure","observations":["Limited in compute scope to the resources and capabilities of a single machine","More or less stuck with some fixed capacity","Cannot span multiple dedicated servers","Operates on a single physical machine partition model"]}
{"type":"entity","name":"AWS EC2","entityType":"Cloud Infrastructure","observations":["Distributed nature allowing access to resources that can span multiple dedicated servers","Spans across a large geographical area","Offers higher availability compared to VPS","Provides higher compute offerings than VPS","Allows for more dynamic scaling than VPS","Can dynamically allocate resources across multiple physical hosts"]}
{"type":"entity","name":"Dynamic Scaling","entityType":"Feature","observations":["Enabled by distributed infrastructure","Allows resources to be adjusted based on demand","More flexible than fixed capacity models"]}
{"type":"entity","name":"High Availability","entityType":"Architecture Pattern","observations":["Achieved through geographical distribution","Enabled by spanning multiple dedicated servers","Reduces single points of failure"]}
{"type":"entity","name":"User","entityType":"Person","observations":["Works a remote software engineering day job","Trains Muay Thai on Mondays, Tuesdays, Thursdays, and Sundays","Currently arrives at gym by 6 PM","Wants to arrive earlier for training (training is 5 PM to 9 PM)","Used to arrive earlier at gym in the past","Has read the book 'Atomic Habits' by James Clear","Previously arrived at gym earlier by keeping to time more easily","Had better time management in the past for gym arrival"]}
{"type":"entity","name":"Event Sourcing","entityType":"Software Architecture Pattern","observations":["Is a strategy for keeping track of all the things that happen in a system","Instead of storing current state, stores sequence of events that led to current state","Uses append-only event log where events are never deleted or updated","Current state is calculated by replaying all events from the beginning","Events describe what happened, not what the state is","Events are treated as immutable facts"]}
{"type":"entity","name":"Traditional Database Approach","entityType":"Software Architecture Pattern","observations":["Stores only current state like a whiteboard that gets erased and updated","Loses all history of how the current state was reached","Uses UPDATE and DELETE operations that modify existing data","Cannot replay or reconstruct past states","Example: UPDATE users SET balance = 1247.50 WHERE id = 123"]}
{"type":"entity","name":"Event Log","entityType":"Data Structure","observations":["Append-only log that stores all events in chronological order","Events are never modified or deleted, only new events are added","Acts like a detailed notebook or journal of everything that happened","Enables complete audit trail and time travel capabilities","Similar to Git commit history for databases"]}
{"type":"entity","name":"Event Replay","entityType":"Process","observations":["Process of reconstructing current state by processing all events from the beginning","Enables time travel to see system state at any point in history","Useful for debugging and understanding how system reached current state","Can create multiple views or projections from same event stream"]}
{"type":"entity","name":"Bitmap Index","entityType":"Database Index Type","observations":["Has constant time O(1) equality lookups for individual values","Excels on low cardinality columns where hash indexes perform poorly","Boolean operations are linear time O(n) where n is table size","Individual row operations are super optimized through bitwise operations and sequential access","Great at optimizing queries with complex conditional logic on low cardinality columns","Not suitable for frequently changing columns","Not suitable for high cardinality columns","Uses dense bit packing for cache-friendly memory access","Can leverage hardware bit-counting instructions for aggregations"]}
{"type":"entity","name":"Hash Index","entityType":"Database Index Type","observations":["Has constant time O(1) equality lookups under ideal conditions","Performs poorly on low cardinality columns due to high collision rates","With low cardinality, degrades from O(1) to O(n) due to collision chain traversal","Works well on high cardinality columns with minimal collisions","Suitable for email addresses, session tokens, user IDs, product SKUs","Not suitable for status fields, boolean columns, category codes, country codes"]}
{"type":"entity","name":"Low Cardinality Column","entityType":"Database Column Type","observations":["Contains few unique values relative to total row count","Examples include status fields, boolean columns, category codes, country codes","Causes high collision rates in hash indexes","Ideal for bitmap indexes","Hash index suitability rule: Cardinality รท Row Count should be > 0.1"]}
{"type":"entity","name":"High Cardinality Column","entityType":"Database Column Type","observations":["Contains many unique values relative to total row count","Examples include email addresses, session tokens, user IDs, product SKUs","Works well with hash indexes due to minimal collisions","Not suitable for bitmap indexes as it would require too many bitmaps","Hash index suitability rule: Cardinality รท Row Count should be > 0.1"]}
{"type":"entity","name":"Bitwise Operations","entityType":"Computer Operation","observations":["Fundamental to bitmap index efficiency","Allows super optimized individual row operations","Enables sequential memory access patterns","Can be parallelized for better performance","Hardware-optimized in modern processors"]}
{"type":"entity","name":"Database Schema Design","entityType":"concept","observations":["Single amount column with entry_type is preferred for double-entry accounting","Bitmap index on entry_type column enables fast lookups of all debits or credits","Alternative to separate debit_amount and credit_amount columns"]}
{"type":"entity","name":"Entry Type Column","entityType":"database_column","observations":["Contains values like 'DEBIT' or 'CREDIT'","Good candidate for bitmap indexing due to low cardinality","Used in single amount column approach for double-entry accounting"]}
{"type":"entity","name":"Double-Entry Accounting Schema","entityType":"accounting_system","observations":["Can be implemented with single amount column plus entry_type","Alternative to separate debit_amount and credit_amount columns","Both approaches maintain accounting balance requirements"]}
{"type":"relation","from":"VPS","to":"AWS EC2","relationType":"differs from"}
{"type":"relation","from":"AWS EC2","to":"Dynamic Scaling","relationType":"enables"}
{"type":"relation","from":"AWS EC2","to":"High Availability","relationType":"provides"}
{"type":"relation","from":"VPS","to":"Dynamic Scaling","relationType":"lacks"}
{"type":"relation","from":"AWS EC2","to":"VPS","relationType":"offers higher compute than"}
{"type":"relation","from":"Event Sourcing","to":"Event Log","relationType":"uses"}
{"type":"relation","from":"Event Sourcing","to":"Event Replay","relationType":"enables"}
{"type":"relation","from":"Event Sourcing","to":"Traditional Database Approach","relationType":"contrasts with"}
{"type":"relation","from":"Event Log","to":"Event Replay","relationType":"supports"}
{"type":"relation","from":"Bitmap Index","to":"Low Cardinality Column","relationType":"excels_on"}
{"type":"relation","from":"Hash Index","to":"Low Cardinality Column","relationType":"performs_poorly_on"}
{"type":"relation","from":"Hash Index","to":"High Cardinality Column","relationType":"works_well_on"}
{"type":"relation","from":"Bitmap Index","to":"High Cardinality Column","relationType":"not_suitable_for"}
{"type":"relation","from":"Bitmap Index","to":"Bitwise Operations","relationType":"uses"}
{"type":"relation","from":"Low Cardinality Column","to":"Hash Index","relationType":"causes_collisions_in"}
{"type":"relation","from":"Bitwise Operations","to":"Bitmap Index","relationType":"optimizes"}
{"type":"relation","from":"Database Schema Design","to":"Bitmap Index","relationType":"utilizes"}
{"type":"relation","from":"Bitmap Index","to":"Entry Type Column","relationType":"indexes"}
{"type":"relation","from":"Database Schema Design","to":"Double-Entry Accounting Schema","relationType":"implements"}
{"type":"relation","from":"Entry Type Column","to":"Double-Entry Accounting Schema","relationType":"supports"}